#!/bin/bash

# Kullanıcıdan isim girmesini isteyen bir mesaj yazdırılır
echo "Lütfen isminizi girin:"

# Kullanıcıdan girdi alınır ve `name` değişkenine atanır
read name

# Kullanıcının girdiği isim ekrana yazdırılır
echo "Merhaba, $name!"

------------------------------------------------

Bir dosya üzerinde döngü oluşturma:
#!/bin/bash

# file.txt dosyasındaki her satırı döngüyle geçerek ekrana yazdırır
for line in $(cat file.txt); do
    echo $line
done

Diğer bir yöntem:
#!/bin/bash
# while döngüsü kullanarak file.txt dosyasındaki her satırı ekrana yazdırır
while read -r line; do
    echo $line
done < file.txt

while 1'den 10'a kadar bastırmak için :
#!/bin/bash
x=1
while [ $x -le 10 ] 
do
    echo "bastir" $x 
    let x++;
done

while ile kullanıcıdan aldığımız talimatı uygulatmak:
#!/bin/bash
GIRIS='Merhaba'
while [ "$GIRIS" != "çıkış" ]
do 
   echo 'Çıkış yapmak için çıkış yazınız : '
   read GIRIS
   echo 'Ekrana yazdırdığım : ' $GIRIS
done

While true olduğu sürece dönecek :
while :
do
    echo "ekrana bastır"
    read DATA    
    echo "ekrana bastırdığımız şey :" $DATA
done

While'da entera bastığından çıkış yapan uygulama :

CIKIS="0"
while [ -n "$CIKIS" ]
do
    echo 'çıkmak için entera bas'
    read CIKIS
done
---------------------------------------------------

 Case kullanımı : 
#!/bin/bash

echo "ayları sec"
while : 
do
read SECIM
case $SECIM in
ocak)
    echo $SECIM 'sectin' ;;
subat)
    echo $SECIM 'sectın' 
    break
    ;;
esac
done


---------------------------------------------------

Şartlı for döngüsü : 
#!/bin/bash

for((i=1 ; i<10 ; i++))
do 
echo $i
done


for döngüsü:
#!/bin/bash

# 1'den 100'e kadar olan sayıları ekrana yazdırır
for x in {1..100}; do
    echo $x
done

#!/bin/bash

# 1'den 100'e kadar olan sayıları 3'er ekrana yazdır ekrana yazdırır
for x in {1..100..3}; do
    echo $x
done

Başka bir yöntem:
#!/bin/bash

# seq programını kullanarak 1'den 100'e kadar olan sayıları ekrana yazdırır
for x in $(seq 1 100); do
    echo $x
done

---------------------------------------------------
if ifadesi:
#!/bin/bash
# $1 burada birinci argümanı temsil eder
# Eğer birinci argüman boş ise, "Bu gerçekleşir" mesajını ekrana yazdırır
if [ "$1" == "" ]; then
    echo "Bu gerçekleşir"
fi

Başka bir örnek:
#!/bin/bash
# $1 burada birinci argümanı temsil eder
# Eğer birinci argüman "hello" ise, "Merhaba Dünya!" mesajını ekrana yazdırır
if [ "$1" == "hello" ]; then
    echo "Merhaba Dünya!"
fi

---------------------------------------------------
if/else ifadesi:
#!/bin/bash
# $1 burada birinci argümanı temsil eder
# Eğer birinci argüman boş ise, "Bu gerçekleşir" mesajını ekrana yazdırır, aksi durumda "Başka bir şey gerçekleşir" mesajını yazdırır
if [ "$1" == "" ]; then
    echo "Bu gerçekleşir"
else
    echo "Başka bir şey gerçekleşir"
fi

Başka bir örnek:
#!/bin/bash
# $1 burada birinci argümanı temsil eder
# Eğer birinci argüman "morning" ise, "Günaydın!" mesajını ekrana yazdırır, aksi durumda "İyi günler!" mesajını yazdırır
if [ "$1" == "morning" ]; then
    echo "Günaydın!"
else
    echo "İyi günler!"
fi
---------------------------------------------------
Komut satırı argümanları:
#!/bin/bash

# İlk komut satırı argümanını ekrana yazdırır
echo "İlk argüman: $1"

Başka bir örnek:
#!/bin/bash

# İkinci komut satırı argümanını ekrana yazdırır
echo "İkinci argüman: $2"
---------------------------------------------------
Bir işlemi arkaplanda çalıştırma:
#!/bin/bash

# ips.txt dosyasındaki her bir IP adresine ping gönderir
# Her bir ping işlemini arkaplanda çalıştırarak daha hızlı bir şekilde tamamlar
for ip in $(cat ips.txt); do
    ping -c 1 $ip &
done
Başka bir örnek:
#!/bin/bash

# files.txt dosyasındaki her bir dosyayı kopyalar
# Her bir kopyalama işlemini arkaplanda çalıştırarak daha hızlı bir şekilde tamamlar
for file in $(cat files.txt); do
    cp $file /destination/path/ &
done

---------------------------------------------------
Bir komutun çıktısını kullanma:
#!/bin/bash

# 646.c dosyasını arar ve son satırı, yani dosya yolunu ekrana yazdırır
file_path=$(locate 646.c | tail -n 1)
echo "Dosya yolu: $file_path"

# Bulunan dosyayı cat komutuyla ekrana yazdırır
cat $file_path

Başka bir örnek:

#!/bin/bash

# ls komutunu kullanarak belirli bir dizindeki dosyaları listeler
# Ardından listelenen dosyaları grep komutuyla filtreler ve sadece belirli bir örüntüye sahip dosyaları ekrana yazdırır
ls /path/to/directory | grep "pattern"

--------------------------------------------------
Basit scriptler
#!/bin/bash
a="host name [`hostname`]"
echo $a

************************
Diğer bir örnek :
#!/bin/bash
a= "Sen kimsin ? : [`whoami`]"
echo $a

************************
Diğer bir örnek :
#!/bin/bash
echo "Kullanıcı adınızı giriniz : [`whoami`]"
read AD

if [ -z "$AD" ] // Eğer kullanıcıdan bir değer almamışsan ekrana kullanıcı adını kendisi yazdırır. -z parametresi(zero) alınacak parametre değeri boşsa bunu yazdırır.
then
AD=`whoami`
fi

echo $AD

----------------------------------------------------
Parametre vermek :
#!/bin/bash
echo 'merhaba' $1

Gelen parametre sayısını hesaplicak kod:
#!/bin/bash
echo "Parametre giriniz"
read PARAM
echo "Gelen parametre sayısı:  $#"

Bulunduğumuz dosyanın adını kullanmak:
#!/bin/bash
echo 'Dosya adı  : $0' // $0 Çalışdığımız yani içinde bulunduğumuz dosyanın adını verir.

Kullanıcıdan alınan tüm parametrelerin birleştirilmesini sağlayan kod:
#!/bin/bash
echo 'Tüm alınan parametrelerin birleşimi : $@'

Kullanıcıdan alınan tüm parametreleri alt alta yazdırır : 
#!/bin/bash
while [ "$#" -gt '0' ] ; do
        echo $1;
        shift
done


