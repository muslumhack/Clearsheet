OS Command Injection
$userInput = $_GET['filename'];
$escapedInput = escapeshellarg($userInput);
$output = shell_exec("cat " . $escapedInput);

SQL Injection
$pdo = new PDO('mysql:host=localhost;dbname=test', 'username', 'password');
$stmt = $pdo->prepare('SELECT * FROM users WHERE email = ?');
$stmt->execute([$_POST['email']]);

Cross-Site Scripting (XSS)
$userInput = $_POST['username'];
$safeInput = htmlspecialchars($userInput, ENT_QUOTES, 'UTF-8');
echo "Hello, " . $safeInput;

Local File Inclusion (LFI)
$allowed_pages = ['home', 'about', 'contact'];
$page = $_GET['page'];
if (!in_array($page, $allowed_pages)) {
    die("Not allowed");
}
include($page . ".");

Remote File Inclusion (RFI):
RFI saldırılarına karşı en iyi savunma, kullanıcının sağladığı dış URL'lerin  tarafından yürütülmesini engellemektir. Bu, .ini dosyasında allow_url_include seçeneğini Off olarak ayarlayarak yapılabilir.

Unrestricted File Upload:
$allowedExtensions = ['jpg', 'png', 'gif'];
$fileName = $_FILES['userfile']['name'];
$ext = pathinfo($fileName, PATHINFO_EXTENSION);
if (!in_array($ext, $allowedExtensions)) {
    die("Not allowed file extension");
}
move_uploaded_file($_FILES['userfile']['tmp_name'], '/safe/path/' . $fileName);

Broken Authentication:
$hashed_password = password_hash($_POST['password'], PASSWORD_DEFAULT);
// Save the hashed password into database, and then during login
$hashed_password_from_db = // retrieve it from db
if (!password_verify($_POST['password'], $hashed_password_from_db)) {
    die("Invalid username or password");
}

Cross-Site Request Forgery (CSRF):
session_start();
$token = $_SESSION['csrf_token'];
if ($_POST['csrf_token'] != $token) {
    die("CSRF token mismatch");
}

XML External Entity (XXE) Attack:
libxml_disable_entity_loader(true);
$xml = simplexml_load_string($_POST['xmlData']);

Insecure Direct Object References (IDOR): Bir kullanıcının yetkisiz olarak başka bir kullanıcının verilerine erişmesini önlemek için sunucu tarafında her zaman yetki kontrolleri yapın:
$user_id = $_SESSION['user_id']; // Authenticated user ID
$requested_id = $_GET['id']; // ID user is attempting to access
if ($user_id !== $requested_id) {
    die("You are not allowed to access this data.");
}

Security Misconfiguration: Bu, genellikle yapılandırma hatalarından kaynaklanır. PHP'deki display_errors ayarını "off" yapmak, potansiyel atacılara uygulamanızın ayrıntılarını göstermemek için önemlidir:
ini_set('display_errors', '0');

Insecure Deserialization: PHP'de güvensiz deserialization'ı önlemek için unserialize() işleminden kaçının veya güvenli bir alternatif kullanın:
// Using JSON as a safer alternative to unserialize()
$safe_data = json_encode($data);
$restored_data = json_decode($safe_data);
